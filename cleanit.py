import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from nltk.stem import WordNetLemmatizer
contractions_mapping = {
    "ain't": "am not / are not",
    "aren't": "are not / am not",
    "can't": "cannot",
    "can't've": "cannot have",
    "'cause": "because",
    "could've": "could have",
    "couldn't": "could not",
    "couldn't've": "could not have",
    "didn't": "did not",
    "doesn't": "does not",
    "don't": "do not",
    "hadn't": "had not",
    "hadn't've": "had not have",
    "hasn't": "has not",
    "haven't": "have not",
    "he'd": "he had / he would",
    "he'd've": "he would have",
    "he'll": "he will",
    "he'll've": "he will have",
    "he's": "he is",
    "how'd": "how did",
    "how'd'y": "how do you",
    "how'll": "how will",
    "how's": "how is / how has",
    "I'd": "I had / I would",
    "I'd've": "I would have",
    "I'll": "I will",
    "I'll've": "I will have",
    "I'm": "I am",
    "I've": "I have",
    "isn't": "is not",
    "it'd": "it had / it would",
    "it'd've": "it would have",
    "it'll": "it will",
    "it'll've": "it will have",
    "it's": "it is",
    "let's": "let us",
    "ma'am": "madam",
    "mayn't": "may not",
    "might've": "might have",
    "mightn't": "might not",
    "mightn't've": "might not have",
    "must've": "must have",
    "mustn't": "must not",
    "mustn't've": "must not have",
    "needn't": "need not",
    "needn't've": "need not have",
    "o'clock": "of the clock",
    "oughtn't": "ought not",
    "oughtn't've": "ought not have",
    "shan't": "shall not",
    "sha'n't": "shall not",
    "shan't've": "shall not have",
    "she'd": "she had / she would",
    "she'd've": "she would have",
    "she'll": "she will",
    "she'll've": "she will have",
    "she's": "she is",
    "should've": "should have",
    "shouldn't": "should not",
    "shouldn't've": "should not have",
    "so've": "so have",
    "so's": "so is",
    "that'd": "that would / that had",
    "that'd've": "that would have",
    "that's": "that is / that has",
    "there'd": "there had / there would",
    "there'd've": "there would have",
    "there's": "there is",
    "they'd": "they had / they would",
    "they'd've": "they would have",
    "they'll": "they will",
    "they'll've": "they will have",
    "they're": "they are",
    "they've": "they have",
    "to've": "to have",
    "wasn't": "was not",
    "we'd": "we had / we would",
    "we'd've": "we would have",
    "we'll": "we will",
    "we'll've": "we will have",
    "we're": "we are",
    "we've": "we have",
    "weren't": "were not",
    "what'll": "what will",
    "what'll've": "what will have",
    "what're": "what are",
    "what's": "what is / what has",
    "what've": "what have",
    "when's": "when is / when has",
    "when've": "when have",
    "where'd": "where did",
    "where's": "where is",
    "where've": "where have",
    "who'll": "who will",
    "who'll've": "who will have",
    "who's": "who is / who has",
    "who've": "who have",
    "why's": "why is / why has",
    "why've": "why have",
    "will've": "will have",
    "won't": "will not",
    "won't've": "will not have",
    "would've": "would have",
    "wouldn't": "would not",
    "wouldn't've": "would not have",
    "y'all": "you all",
    "y'all'd": "you all would",
    "y'all'd've": "you all would have",
    "y'all're": "you all are",
    "y'all've": "you all have",
    "you'd": "you had / you would",
    "you'd've": "you would have",
    "you'll": "you will",
    "you'll've": "you will have",
    "you're": "you are",
    "you've": "you have",
    "who'd": "who would / who had",
    "who'd've": "who would have",
    "there're": "there are",
    "we'd're": "we would / we had",
    "you'd're": "you would / you had",
    "they'd're": "they would / they had",
    "that're": "that are",
    "he'd're": "he would / he had",
    "she'd're": "she would / she had",
    "it'd're": "it would / it had",
    "what'd": "what did",
    "what'd've": "what would / what had",
    "who're": "who are",
    "they'ven't": "they have not",
    "there've": "there have",
    "he'sn't": "he has not / he is not",
    "she'sn't": "she has not / she is not",
    "it'sn't": "it has not / it is not",
    "that'sn't": "that has not / that is not",
    "here's": "here is",
    "there'sn't": "there has not / there is not",
    "where'sn't": "where has not / where is not",
    "who'sn't": "who has not / who is not",
    "what'sn't": "what has not / what is not",
    "let'sn't": "let us not",
    "who'ven't": "who have not",
    "they'ven't": "they have not",
    "could'ven't": "could not have",
    "should'ven't": "should not have",
    "would'ven't": "would not have",
    "mightn't've": "might not have",
    "mustn't've": "must not have",
    "oughtn't've": "ought not have",
    "shan't've": "shall not have",
    "needn't've": "need not have",
    "daren't": "dare not",
    "daren't": "dare not",
    "mightn't've": "might not have",
    "mustn't've": "must not have",
    "oughtn't've": "ought not have",
    "shan't've": "shall not have",
    "needn't've": "need not have",
    "daren't": "dare not",
    "mightn't've": "might not have",
    "mustn't've": "must not have",
    "oughtn't've": "ought not have",
    "shan't've": "shall not have",
    "needn't've": "need not have",
    "daren't": "dare not",
    "hasn't": "has not",
    "haven't": "have not",
    "hadn't": "had not",
    "aren't": "are not",
    "isn't": "is not",
    "weren't": "were not",
    "wasn't": "was not",
    "don't": "do not",
    "doesn't": "does not",
    "didn't": "did not",
    "won't": "will not",
    "can't": "cannot",
    "couldn't": "could not",
    "shouldn't": "should not",
    "wouldn't": "would not",
    "don't": "do not",
    "doesn't": "does not",
    "didn't": "did not",
    "won't": "will not",
    "can't": "cannot",
    "couldn't": "could not",
    "shouldn't": "should not",
    "wouldn't": "would not",
    "don't": "do not",
    "doesn't": "does not",
    "didn't": "did not",
    "won't": "will not",
    "can't": "cannot",
    "couldn't": "could not",
    "shouldn't": "should not",
    "wouldn't": "would not",
    "I'm": "I am",
    "you're": "you are",
    "he's": "he is",
    "she's": "she is",
    "it's": "it is",
    "we're": "we are",
    "they're": "they are",
    "I've": "I have",
    "you've": "you have",
    "we've": "we have",
    "they've": "they have",
    "I'll": "I will",
    "you'll": "you will",
    "he'll": "he will",
    "she'll": "she will",
    "it'll": "it will",
    "we'll": "we will",
    "they'll": "they will",
    "I'd": "I would / I had",
    "you'd": "you would / you had",
    "he'd": "he would / he had",
    "she'd": "she would / she had",
    "it'd": "it would / it had",
    "we'd": "we would / we had",
    "they'd": "they would / they had",
    "I'm": "I am",
    "you're": "you are",
    "he's": "he is",
    "she's": "she is",
    "it's": "it is",
    "we're": "we are",
    "they're": "they are",
    "I've": "I have",
    "you've": "you have",
    "we've": "we have",
    "they've": "they have",
    "I'll": "I will",
    "you'll": "you will",
    "he'll": "he will",
    "she'll": "she will",
    "it'll": "it will",
    "we'll": "we will",
    "they'll": "they will"
}
lemmatizer = WordNetLemmatizer()


def expand_contractions(text, contractions_mapping):
    contractions_pattern = re.compile('({})'.format('|'.join(contractions_mapping.keys())), 
                                      flags=re.IGNORECASE|re.DOTALL)
    
    def expand_match(contraction):
        match = contraction.group(0)
        expanded_contraction = contractions_mapping.get(match.lower())
        if not expanded_contraction:
            expanded_contraction = contractions_mapping.get(match)
        return expanded_contraction
    expanded_text = contractions_pattern.sub(expand_match, text)
    
    return expanded_text

def lemmatize_text(text):
    words = word_tokenize(text)
    lemmatized_words = [lemmatizer.lemmatize(word) for word in words]
    lemmatized_text = ' '.join(lemmatized_words)
    return lemmatized_text

def remove_special_characters(text):
  pattern = r"[^\w\s]"
  return re.sub(pattern, ' ', text)

def remove_stopwords(text):
    words = word_tokenize(text)
    english_stopwords = set(stopwords.words('english'))
    filtered_words = [word for word in words if word.lower() not in english_stopwords]
    filtered_text = ' '.join(filtered_words)

    return filtered_text

def preprocess_text(text):
    text = text.lower()
    text = expand_contractions(text, contractions_mapping)
    text = remove_special_characters(text)
    text = re.sub(r'\b([a-zA-Z])\b', r' \1 ', text)
    text = remove_stopwords(text)
    text = lemmatize_text(text)
    return text
